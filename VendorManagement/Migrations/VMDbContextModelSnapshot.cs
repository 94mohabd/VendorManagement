// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VendorManagement.Data;

#nullable disable

namespace VendorManagement.Migrations
{
    [DbContext(typeof(VMDbContext))]
    partial class VMDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuditVendorSharedData", b =>
                {
                    b.Property<int>("AuditsAuditId")
                        .HasColumnType("int");

                    b.Property<int>("VendorSharedDataId")
                        .HasColumnType("int");

                    b.HasKey("AuditsAuditId", "VendorSharedDataId");

                    b.HasIndex("VendorSharedDataId");

                    b.ToTable("AuditVendorSharedData");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = 1,
                            AnswerText = "Social Security Number (SSN)",
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 2,
                            AnswerText = "Date of Birth",
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 3,
                            AnswerText = "Home Address",
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 4,
                            AnswerText = "Encrypted at rest and in transit",
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 5,
                            AnswerText = "Stored in plaintext",
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 6,
                            AnswerText = "Sent over unsecured connections",
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 7,
                            AnswerText = "Implement strong access controls",
                            QuestionId = 3
                        },
                        new
                        {
                            AnswerId = 8,
                            AnswerText = "Use weak passwords",
                            QuestionId = 3
                        },
                        new
                        {
                            AnswerId = 9,
                            AnswerText = "Share database credentials openly",
                            QuestionId = 3
                        });
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.Assessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssessmentId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.AssessmentAnswer", b =>
                {
                    b.Property<int>("AssessmentAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentAnswerId"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssessmentQuestionId")
                        .HasColumnType("int");

                    b.HasKey("AssessmentAnswerId");

                    b.HasIndex("AssessmentQuestionId");

                    b.ToTable("AssessmentAnswers");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.AssessmentItem", b =>
                {
                    b.Property<int>("AssessmentItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentItemId"));

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("ItemText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionTypeId")
                        .HasColumnType("int");

                    b.HasKey("AssessmentItemId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("AssessmentItem");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.AssignedAssessment", b =>
                {
                    b.Property<int>("AssignedAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignedAssessmentId"));

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("AssignedAssessmentId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("VendorId");

                    b.ToTable("AssignedAssessments");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.Audit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"));

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("AuditId");

                    b.HasIndex("VendorId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.AuditCycle", b =>
                {
                    b.Property<int>("AuditCycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditCycleId"));

                    b.Property<int>("AuditCyclePeriod")
                        .HasColumnType("int");

                    b.Property<string>("AuditCycleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditCycleId");

                    b.ToTable("AuditCycles");

                    b.HasData(
                        new
                        {
                            AuditCycleId = 1,
                            AuditCyclePeriod = 1,
                            AuditCycleType = "Monthly"
                        },
                        new
                        {
                            AuditCycleId = 2,
                            AuditCyclePeriod = 3,
                            AuditCycleType = "Quarterly"
                        },
                        new
                        {
                            AuditCycleId = 3,
                            AuditCyclePeriod = 6,
                            AuditCycleType = "Semi-Annual"
                        },
                        new
                        {
                            AuditCycleId = 4,
                            AuditCyclePeriod = 12,
                            AuditCycleType = "Annual"
                        },
                        new
                        {
                            AuditCycleId = 5,
                            AuditCyclePeriod = 24,
                            AuditCycleType = "Bi-Annual"
                        });
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.ContractCycle", b =>
                {
                    b.Property<int>("ContractCycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractCycleId"));

                    b.Property<int>("ContractCyclePeriod")
                        .HasColumnType("int");

                    b.Property<string>("ContractCycleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractCycleId");

                    b.ToTable("ContractCycles");

                    b.HasData(
                        new
                        {
                            ContractCycleId = 1,
                            ContractCyclePeriod = 1,
                            ContractCycleType = "Monthly"
                        },
                        new
                        {
                            ContractCycleId = 2,
                            ContractCyclePeriod = 3,
                            ContractCycleType = "Quarterly"
                        },
                        new
                        {
                            ContractCycleId = 3,
                            ContractCyclePeriod = 6,
                            ContractCycleType = "Semi-Annual"
                        },
                        new
                        {
                            ContractCycleId = 4,
                            ContractCyclePeriod = 12,
                            ContractCycleType = "Annual"
                        },
                        new
                        {
                            ContractCycleId = 5,
                            ContractCyclePeriod = 24,
                            ContractCycleType = "Bi-Annual"
                        });
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.CriticalityLevel", b =>
                {
                    b.Property<int>("CriticalityLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CriticalityLevelId"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CriticalityLevelId");

                    b.ToTable("CriticalityLevels");

                    b.HasData(
                        new
                        {
                            CriticalityLevelId = 1,
                            Level = "Low"
                        },
                        new
                        {
                            CriticalityLevelId = 2,
                            Level = "Medium"
                        },
                        new
                        {
                            CriticalityLevelId = 3,
                            Level = "High"
                        });
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.Header", b =>
                {
                    b.Property<int>("HeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeaderId"));

                    b.Property<string>("HeaderText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HeaderId");

                    b.ToTable("Headers");

                    b.HasData(
                        new
                        {
                            HeaderId = 1,
                            HeaderText = "Header 1"
                        },
                        new
                        {
                            HeaderId = 2,
                            HeaderText = "Header 2"
                        },
                        new
                        {
                            HeaderId = 3,
                            HeaderText = "Header 3"
                        });
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            QuestionText = "What is considered personally identifiable information (PII)?",
                            QuestionTypeId = 2
                        },
                        new
                        {
                            QuestionId = 2,
                            QuestionText = "How should sensitive data be handled in storage and transmission?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            QuestionId = 3,
                            QuestionText = "What steps should be taken to secure user data in a database?",
                            QuestionTypeId = 1
                        });
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.QuestionType", b =>
                {
                    b.Property<int>("QuestionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionTypeId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionTypeId");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            QuestionTypeId = 1,
                            Type = "Radio"
                        },
                        new
                        {
                            QuestionTypeId = 2,
                            Type = "Checkbox"
                        });
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<int>("AuditCategoryStatus")
                        .HasColumnType("int");

                    b.Property<int>("AuditCycleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("AuditDaysUntilExpiration")
                        .HasColumnType("float");

                    b.Property<DateTime>("AuditDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuditStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractCategoryStatus")
                        .HasColumnType("int");

                    b.Property<int>("ContractCycleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("ContractDaysUntilExpiration")
                        .HasColumnType("float");

                    b.Property<DateTime>("ContractDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CriticalityLevelId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentalOwnerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorTypeId")
                        .HasColumnType("int");

                    b.HasKey("VendorId");

                    b.HasIndex("AuditCycleId");

                    b.HasIndex("ContractCycleId");

                    b.HasIndex("CriticalityLevelId");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.VendorSharedData", b =>
                {
                    b.Property<int>("VendorSharedDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorSharedDataId"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("SharedData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorSharedDataId");

                    b.ToTable("VendorSharedData");

                    b.HasData(
                        new
                        {
                            VendorSharedDataId = 1,
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SharedData = "General"
                        },
                        new
                        {
                            VendorSharedDataId = 2,
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SharedData = "Contact"
                        },
                        new
                        {
                            VendorSharedDataId = 3,
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SharedData = "Financial"
                        },
                        new
                        {
                            VendorSharedDataId = 4,
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SharedData = "ID Numbers"
                        },
                        new
                        {
                            VendorSharedDataId = 5,
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SharedData = "Web/Geolocation"
                        },
                        new
                        {
                            VendorSharedDataId = 6,
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SharedData = "Human Resources"
                        },
                        new
                        {
                            VendorSharedDataId = 7,
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SharedData = "Health/Insurance"
                        },
                        new
                        {
                            VendorSharedDataId = 8,
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SharedData = "Biometric/Genetic"
                        },
                        new
                        {
                            VendorSharedDataId = 9,
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SharedData = "Special Category"
                        },
                        new
                        {
                            VendorSharedDataId = 10,
                            LastUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SharedData = "Other"
                        });
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.VendorType", b =>
                {
                    b.Property<int>("VendorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorTypeId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorTypeId");

                    b.ToTable("VendorTypes");

                    b.HasData(
                        new
                        {
                            VendorTypeId = 1,
                            Type = "IT Hardware"
                        },
                        new
                        {
                            VendorTypeId = 2,
                            Type = "Software"
                        },
                        new
                        {
                            VendorTypeId = 3,
                            Type = "SaaS/PaaS"
                        },
                        new
                        {
                            VendorTypeId = 4,
                            Type = "Services"
                        },
                        new
                        {
                            VendorTypeId = 5,
                            Type = "Services (IT/Technical)"
                        },
                        new
                        {
                            VendorTypeId = 6,
                            Type = "Physical Security"
                        },
                        new
                        {
                            VendorTypeId = 7,
                            Type = "Other-Products"
                        },
                        new
                        {
                            VendorTypeId = 8,
                            Type = "Other-Services"
                        },
                        new
                        {
                            VendorTypeId = 9,
                            Type = "Records Information Management/Shredding"
                        },
                        new
                        {
                            VendorTypeId = 10,
                            Type = "HR/Benefits"
                        },
                        new
                        {
                            VendorTypeId = 11,
                            Type = "Insurance"
                        });
                });

            modelBuilder.Entity("VendorVendorSharedData", b =>
                {
                    b.Property<int>("VendorSharedDataId")
                        .HasColumnType("int");

                    b.Property<int>("VendorsVendorId")
                        .HasColumnType("int");

                    b.HasKey("VendorSharedDataId", "VendorsVendorId");

                    b.HasIndex("VendorsVendorId");

                    b.ToTable("VendorVendorSharedData");
                });

            modelBuilder.Entity("AuditVendorSharedData", b =>
                {
                    b.HasOne("VendorManagement.Models.Entities.Audit", null)
                        .WithMany()
                        .HasForeignKey("AuditsAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendorManagement.Models.Entities.VendorSharedData", null)
                        .WithMany()
                        .HasForeignKey("VendorSharedDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.Answer", b =>
                {
                    b.HasOne("VendorManagement.Models.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.AssessmentAnswer", b =>
                {
                    b.HasOne("VendorManagement.Models.Entities.AssessmentItem", "AssessmentQuestion")
                        .WithMany("AssessmentAnswers")
                        .HasForeignKey("AssessmentQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentQuestion");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.AssessmentItem", b =>
                {
                    b.HasOne("VendorManagement.Models.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentItems")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendorManagement.Models.Entities.QuestionType", "QuestionType")
                        .WithMany("AssessmentQuestions")
                        .HasForeignKey("QuestionTypeId");

                    b.Navigation("Assessment");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.AssignedAssessment", b =>
                {
                    b.HasOne("VendorManagement.Models.Entities.Assessment", "Assessment")
                        .WithMany("AssignedAssessments")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendorManagement.Models.Entities.Vendor", "Vendor")
                        .WithMany("AssignedAssessments")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.Audit", b =>
                {
                    b.HasOne("VendorManagement.Models.Entities.Vendor", "Vendor")
                        .WithMany("Audits")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.Question", b =>
                {
                    b.HasOne("VendorManagement.Models.Entities.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.Vendor", b =>
                {
                    b.HasOne("VendorManagement.Models.Entities.AuditCycle", "AuditCycle")
                        .WithMany("Vendors")
                        .HasForeignKey("AuditCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendorManagement.Models.Entities.ContractCycle", "ContractCycle")
                        .WithMany("Vendors")
                        .HasForeignKey("ContractCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendorManagement.Models.Entities.CriticalityLevel", "CriticalityLevel")
                        .WithMany("Vendors")
                        .HasForeignKey("CriticalityLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendorManagement.Models.Entities.VendorType", "VendorType")
                        .WithMany("Vendors")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditCycle");

                    b.Navigation("ContractCycle");

                    b.Navigation("CriticalityLevel");

                    b.Navigation("VendorType");
                });

            modelBuilder.Entity("VendorVendorSharedData", b =>
                {
                    b.HasOne("VendorManagement.Models.Entities.VendorSharedData", null)
                        .WithMany()
                        .HasForeignKey("VendorSharedDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendorManagement.Models.Entities.Vendor", null)
                        .WithMany()
                        .HasForeignKey("VendorsVendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.Assessment", b =>
                {
                    b.Navigation("AssessmentItems");

                    b.Navigation("AssignedAssessments");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.AssessmentItem", b =>
                {
                    b.Navigation("AssessmentAnswers");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.AuditCycle", b =>
                {
                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.ContractCycle", b =>
                {
                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.CriticalityLevel", b =>
                {
                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.QuestionType", b =>
                {
                    b.Navigation("AssessmentQuestions");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.Vendor", b =>
                {
                    b.Navigation("AssignedAssessments");

                    b.Navigation("Audits");
                });

            modelBuilder.Entity("VendorManagement.Models.Entities.VendorType", b =>
                {
                    b.Navigation("Vendors");
                });
#pragma warning restore 612, 618
        }
    }
}
