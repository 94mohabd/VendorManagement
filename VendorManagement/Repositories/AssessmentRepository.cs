using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using VendorManagement.Data;
using VendorManagement.Models.Entities;

namespace VendorManagement.Repositories
{
    public class AssessmentRepository
    {
        private readonly VMDbContext VMDbContext;

        public AssessmentRepository(VMDbContext VMDbContext)
        {
            this.VMDbContext = VMDbContext;
        }

        public async Task<IEnumerable<Assessment>> GetAllAssessmentsAsync()
        {
            return await VMDbContext.Assessments
           /* .Include(a => a.AssessmentItems)
                    .ThenInclude(item => item as AssessmentQuestion)
                        .ThenInclude(q => q.QuestionType)
                .Include(a => a.AssessmentItems)
                    .ThenInclude(item => item as AssessmentHeader)*/
                .Include(a => a.AssignedAssessments)
                    .ThenInclude(aa => aa.Vendor)
                    .ToListAsync();
        }

        public async Task<Assessment> GetAssessmentByIdAsync(int id)
        {
            return await VMDbContext.Assessments
                 .Include(a => a.AssessmentItems)
                     .ThenInclude(ai => ai.AssessmentAnswers)
                 .Include(a => a.AssignedAssessments)
                 .FirstOrDefaultAsync(a => a.AssessmentId == id);
        }

        public async Task<int> AddAssessmentAsync(Assessment assessment)
        {
            VMDbContext.Assessments.Add(assessment);
            await VMDbContext.SaveChangesAsync();
            return assessment.AssessmentId; // Assuming AssessmentId is generated by the database and populated by EF Core
        }

        public async Task<int> UpdateAssessmentAsync(Assessment assessment)
        {
            VMDbContext.Assessments.Update(assessment);
            await VMDbContext.SaveChangesAsync();
            return assessment.AssessmentId; // Assuming AssessmentId is generated by the database and populated by EF Core
        }

        public async Task DeleteAssessmentAsync(int id)
        {
            var assessment = await VMDbContext.Assessments.FirstOrDefaultAsync(x => x.AssessmentId == id);
            if (assessment != null)
            {
                VMDbContext.Assessments.Remove(assessment);
                await VMDbContext.SaveChangesAsync();
            }
        }
    }
}
